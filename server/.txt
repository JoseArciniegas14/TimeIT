// async function getActiveAlarmsAndUsers(req, res) {
//   try {
//     const activeUsersWithAlarms = await User.aggregate([
//       {
//         $match: { active: true },
//       },
//       {
//         $lookup: {
//           from: 'alarms',
//           let: { userId: '$_id' },
//           pipeline: [
//             {
//               $match: {
//                 $expr: { $and: [{ $eq: ['$userid', '$$userId'] }, { $eq: ['$state', true] }] },
//               },
//             },
//           ],
//           as: 'activeAlarms',
//         },
//       },
//     ]);

//     activeUsersWithAlarms.forEach(user => {
//       if (user.activeAlarms.length > 0) {
//         console.log("Alarmas activas para el usuario", user.name, ":", user.activeAlarms);
//       } else {
//         console.log("esto al menos funciona");
//       }

//     });

//   } catch (error) {
//     console.error('Error al obtener alarmas activas y usuarios activos:', error);
//     res.status(500).send("Error interno del servidor");
//   }
// }

// cron.schedule('*/30 * * * * *', getActiveAlarmsAndUsers)      
      
      REGISTER QUE FUNCIONA

      function register(req, res) {
  const { name, age, country, city, email, phone, password } = req.body;

  console.log(req.body);

  const emailLowerCase = email.toLowerCase()
  if (!password || !email || !phone) {
    return res.status(400).send({ msg: "Todos los campos son obligatorios." });
  }

  const user = new User({
    name,
    age,
    country,
    city,
    email: emailLowerCase,
    phone,
    active: true,
  });

  // Hash de la contraseña
  const salt = bcrypt.genSaltSync(10)
  const hashPassword = bcrypt.hashSync(password, salt)
  user.password = hashPassword

  // Guardar el usuario
  user.save((error, userStore) => {
    if (error) {
      console.log(error);
      res.status(500).send({ msg: "Error al registrar el usuario", error });
    } else {

      res.status(201).send(userStore);
    }
  });
};



      LOGIN QUE FUNCIONA

      function login(req, res) {

  const { email, password } = req.body;

  if (!email || !password) {
    return res.status(400).send({ msg: "Todos los campos son obligatorios" });
  }

  const emailLowerCase = email.toLowerCase();

  User.findOne({ email: emailLowerCase }, (error, userStore) => {
    if (error) {
      return res.status(500).send({ msg: "Error del servidor - Usuario no encontrado" });
    }
    if (!userStore) {
      return res.status(400).send({ msg: "Usuario no encontrado" });
    }
    bcrypt.compare(password, userStore.password, (bcryptError, check) => {
      if (bcryptError) {
        return res.status(500).send({ msg: "Algo mal en el bcrypt" });
      }

      if (!check) {
        return res.status(400).send({ msg: "Usuario o contraseña incorrecta" });
      }
      req.session.user = {
        email: userStore.email,
        userId: userStore._id,
        userPhone: userStore.phone
      };
      console.log(req.session);
      res.status(200).send({ msg: "Inicio de sesión exitoso" });
    });
  });
}


    VERSION 1 MIDDLEWARE

function asureAuth(req, res, next) {

  if (!req.session.user || !req.session.user.userId) {
    return res.status(403).send({ msg: 'Acceso no autorizado' });
  }
  // Si la sesión tiene un usuario ID, consideramos que el usuario está autenticado
  // req.user = {
  //   user_id: req.session.user.userId,
  //   // Agrega más información del usuario si es necesario
  // };
  console.log("ESTO ES DEL MIDDEL", req.session.user);
  next();
}

module.exports = {
  asureAuth,
};
      req.session.destroy((err) => {
        if (err) {
          console.error('Error al cerrar sesión anterior:', err);
          res.status(500).send({ msg: 'Error al cerrar sesión anterior' });
          return;
        }
      });



Create user
{
 "http://localhost:3000/api/v1/auth/register"
  {
    "name": "Yo",
    "age": 99,
    "email": "yor@gmail.com"
    "phone": 12345665432,
    "country": "city",
    "city": "alfalfa",
    "password": "1234"
  }
}


Login
{
 "http://localhost:3000/api/v1"/auth/login
  {
	"email": "Juan@gmail.com",
	"password": "1235"
  }
}


Get me
{ 
 "http://localhost:3000/api/v1"/user/getme
}


Update User
{
 "http://localhost:3000/api/v1/user/:id/update"
 {
  "name": "Yo",
  "age": 18,
  "country": "Lokombia",
  "city": "GoKU",
  "email": "Yo@gmail.com",
  "phone": 12388321,
  "password": "yo1234"
 }
}


Logout
{
 "http://localhost:3000/api/v1/user/logout"
}


Delete user
{
 "http://localhost:3000/api/v1/user/:id/delete"
}




 "http://localhost:3000/api/v1"
 "http://localhost:3000/api/v1"
 "http://localhost:3000/api/v1"


{
	"email": "Juan@gmail.com",
	"password": "12345"
}

{
	"email": "Robbin@gmail.com",
	"password": "54321"
}